{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["(function () {\nvar $089c40fcbb903d20$exports = {};\n// THIS SEEMS LIKE A COMPLICATED PROJECT AS THERE ARE THINGS TO ACCOUNT FOR\n// * The user must enter valid parameters for the date, month and the year\n// * For the year, I want the user to only enter a year between 1970 and the current year. Any year outside this is invalid.\n// * For the month, I need to ensure that the user only enters values between 1 - 12 which will mean January - December.\n// * For the date, this is a bit tricky because depending on which month the user enters the date for the end of the month varies. For Example:\n//    * 30 days is only available September, April, June and November\n//    * 28 days is only available to February but we will have 29 days if a leap year occurs\n//    * 31 days exist for the all the other months excluding those mentioned above.\n// * When the user fails any of the conditions we need to display error messages depending on the fail on submission of the form.\n// * When the user passes the condition then we need to calculate the users age in years, months and days based on the users inputs and the current year.\n// * We also need to update the UI as the user submits the form.\nconst $089c40fcbb903d20$var$lightRed = \"#FF5959\";\nconst $089c40fcbb903d20$var$smokeyGrey = \"#716f6f\";\n/** Class representing the first and last day of the month */ class $089c40fcbb903d20$var$Month {\n    startDate = 1;\n    /**\n   * The end day of the month\n   * @param {number} endDate\n   */ constructor(endDate){\n        this.endDate = endDate;\n    }\n}\nconst $089c40fcbb903d20$var$January = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$February = new $089c40fcbb903d20$var$Month(28);\nconst $089c40fcbb903d20$var$March = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$April = new $089c40fcbb903d20$var$Month(30);\nconst $089c40fcbb903d20$var$May = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$June = new $089c40fcbb903d20$var$Month(30);\nconst $089c40fcbb903d20$var$July = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$August = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$September = new $089c40fcbb903d20$var$Month(30);\nconst $089c40fcbb903d20$var$October = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$November = new $089c40fcbb903d20$var$Month(30);\nconst $089c40fcbb903d20$var$December = new $089c40fcbb903d20$var$Month(31);\nconst $089c40fcbb903d20$var$monthsInAYear = [\n    $089c40fcbb903d20$var$January,\n    $089c40fcbb903d20$var$February,\n    $089c40fcbb903d20$var$March,\n    $089c40fcbb903d20$var$April,\n    $089c40fcbb903d20$var$May,\n    $089c40fcbb903d20$var$June,\n    $089c40fcbb903d20$var$July,\n    $089c40fcbb903d20$var$August,\n    $089c40fcbb903d20$var$September,\n    $089c40fcbb903d20$var$October,\n    $089c40fcbb903d20$var$November,\n    $089c40fcbb903d20$var$December\n];\nclass $089c40fcbb903d20$var$AppComponent {\n    #dayInput = /** @type {HTMLInputElement} */ document.getElementById(\"day\");\n    #monthInput = /** @type {HTMLInputElement} */ document.getElementById(\"month\");\n    #yearInput = /** @type {HTMLInputElement} */ document.getElementById(\"year\");\n    #button = document.querySelector(\".btn-submit\");\n    constructor(){\n        this.#button?.addEventListener(\"click\", this.#submitDate.bind(this));\n    }\n    /**\n   * The event object will be available when the click event is fired\n   *\n   * @param {event} evtObj\n   */ #submitDate(evtObj) {\n        evtObj?.preventDefault();\n        // We want to check the validity of each of the input.\n        // The none of the inputs should be empty on form submission and if one or all are show an error to be user\n        // If one of the values is not a number then return an error if one or all are not values.\n        this.#validateInput(this.#dayInput);\n        this.#validateInput(this.#monthInput);\n        this.#validateInput(this.#yearInput);\n        const isInvalid = this.#validateInput(this.#dayInput) || this.#validateInput(this.#monthInput) || this.#validateInput(this.#yearInput);\n        if (isInvalid) return;\n        const year = Number(this.#yearInput.value);\n        const month = Number(this.#monthInput.value);\n        const day = Number(this.#dayInput.value);\n        // Update the UI if the numbers are not suitable conditions.\n        const isValidDate = this.#validateDate(year, month, day);\n        if (!isValidDate) return;\n        // FireFox throw an error when you pass in the month and days as 1 instead 01 so I account for this here.\n        // The year is ok because we cannot go below 1970 and above the current year which is 2023 at this point.\n        const [monthFormat, dayFormat] = this.#formatMonthAndDay(month, day);\n        // MAKING USE OF THE DATE TIME STRING FORMAT --> YYYY-MM-DDTHH:mm:ss:sssZ\n        const birthdayDate = new Date(`${year}-${monthFormat}-${dayFormat}T00:00:00Z`);\n        const age = this.#calculateAge(birthdayDate);\n        // The next step is to display the result and update the UI.\n        this.#displayAge(age);\n    }\n    /**\n   * A method that returns an array of strings with the month input in the MM format and day in DD always.\n   * @param {number} month - The month input\n   * @param {number} day - The day input\n   * @returns {string[]} - An array of strings\n   */ #formatMonthAndDay(month, day) {\n        const months = month < 10 ? `0${month}` : `${month}`;\n        const days = day < 10 ? `0${day}` : `${day}`;\n        return [\n            months,\n            days\n        ];\n    }\n    /**\n   * This function display the age in years, months and days based on the users input.\n   * @param {object} age\n   * @param {number} age.years - number of years\n   * @param {number} age.months - number of months\n   * @param {number} age.days - number of days\n   */ #displayAge({ years: years, months: months, days: days }) {\n        const displayAgeComponent = /** @type {HTMLElement} */ document.querySelector(\"div[class~='display-age-component']\");\n        displayAgeComponent.classList.add(\"show\");\n        displayAgeComponent.innerHTML = `\n    <p class=\"display-age-component__year\"><span>${years} </span> years</p>\n    <p class=\"display-age-component__month\"><span>${months} </span> months</p>\n    <p class=\"display-age-component__days\"><span>${days} </span> days</p>\n    `;\n    }\n    /**\n   * Calculates the difference between two dates in years, months, and days.\n   * @param {Date} birthdayDate - The date of birth\n   * @returns {{years:number, months:number, days:number} } An object containing the number of years, months, and days between the two dates.\n   */ #calculateAge(birthdayDate) {\n        // We need to create the current date\n        const currentDate = new Date();\n        const dateOfBirth = birthdayDate;\n        let years = currentDate.getFullYear() - dateOfBirth.getFullYear();\n        let months = currentDate.getMonth() - dateOfBirth.getMonth();\n        let days = currentDate.getDate() - dateOfBirth.getDate();\n        if (months < 0 || months === 0 && days < 0) {\n            years--;\n            months += 12;\n        }\n        if (days < 0) {\n            months--;\n            const currentYear = currentDate.getFullYear();\n            const currentMonth = currentDate.getMonth();\n            // At this point its is possible that the current day date is less than the day for the date of birth.\n            // We need to get the last date of the previous month from the current date and to do this we need to pass in 0 as the last argument in the date constructor. This will give us what we want.\n            // Then we can obtain the last day of that month.\n            // Then we add the last day to our days to keep updating it provided it passes the if check.\n            const previousLastMonthDate = new Date(currentYear, currentMonth, 0);\n            const previousLastMonthDay = previousLastMonthDate.getDate();\n            days = days + previousLastMonthDay;\n        }\n        // Check if the birthday falls on February 29th\n        if (dateOfBirth.getMonth() === 1 && dateOfBirth.getDate() === 29) {\n            // We need to find the last leap year\n            let lastLeapYear = currentDate.getFullYear();\n            // We need check to see when the last leap year occurred it could be this year or the year or years before the current year.\n            while(!(lastLeapYear % 4 === 0 && lastLeapYear % 100 !== 0 || lastLeapYear % 400 === 0))lastLeapYear--;\n            years = lastLeapYear - dateOfBirth.getFullYear();\n            if (months < 0 || months === 0 && days < 0) {\n                years--;\n                months += 12;\n            }\n            if (days < 0) {\n                months--;\n                const currentYear = currentDate.getFullYear();\n                const currentMonth = currentDate.getMonth();\n                const previousLastMonthDate = new Date(currentYear, currentMonth, 0);\n                const previousLastMonthDay = previousLastMonthDate.getDate();\n                days = days + previousLastMonthDay;\n            }\n        }\n        return {\n            years: years,\n            months: months,\n            days: days\n        };\n    }\n    /**\n   * This functions checks to see if the values passed in make up a valid date\n   * @param {number} year This is number of years\n   * @param {number} month This is the number of months\n   * @param {number} day This is the day of the month.\n   * @returns {boolean} This indicates if it is valid or not by returning a boolean true or false.\n   */ #validateDate(year, month, day) {\n        const currentDate = new Date();\n        const epochDate = new Date(1000);\n        const indexedMonth = month - 1;\n        const [monthFormat, dayFormat] = this.#formatMonthAndDay(month, day);\n        const dateInput = new Date(`${year}-${monthFormat}-${dayFormat}T00:00:00Z`);\n        const currentYear = currentDate.getFullYear();\n        const epochYear = epochDate.getFullYear();\n        // Check if the year pass n is a leap year\n        const isLeapYear = new Date(year, 1, 29).getDate() === 29;\n        $089c40fcbb903d20$var$February.endDate = isLeapYear ? 29 : 28;\n        const checkIndexMonth = indexedMonth < 0 || indexedMonth > 11;\n        const checkMaxYear = year > currentYear;\n        const checkMinYear = year < epochYear;\n        const checkMinDay = day < $089c40fcbb903d20$var$monthsInAYear[indexedMonth]?.startDate;\n        const checkMaxDay = day > $089c40fcbb903d20$var$monthsInAYear[indexedMonth]?.endDate;\n        const checkInputDate = dateInput > currentDate;\n        if (checkIndexMonth || checkMaxYear || checkMinYear || checkMinDay || checkMaxDay || checkInputDate) {\n            if (checkIndexMonth) this.#showErrorMessage(this.#monthInput, \"Must be a valid month\");\n            if (checkMaxYear || checkInputDate) this.#showErrorMessage(this.#yearInput, \"Must be in the past\");\n            else if (checkMinYear) this.#showErrorMessage(this.#yearInput, \"Must be more than 1970\");\n            if (checkMinDay || checkMaxDay) this.#showErrorMessage(this.#dayInput, \"Must be a valid date\");\n            else if (day < 1 || day > 31) this.#showErrorMessage(this.#dayInput, \"Must be a valid day\");\n            return false;\n        } else return true;\n    }\n    /**\n   * This method validate the HTMLInputElements\n   * @param {HTMLInputElement} input\n   * @return {void | boolean} Returns nothing or a boolean with the value of true.\n   */ #validateInput(input) {\n        if (input?.value.trim() === \"\") {\n            this.#showErrorMessage(input, \"This field is required\");\n            return true;\n        }\n        if (isNaN(Number(input?.value))) {\n            this.#showErrorMessage(input, \"Must be a valid number\");\n            return true;\n        }\n        this.#removeErrorMessage(input, \"\");\n    }\n    /**\n   * This private method will show an error messages and indicators to the user.\n   * @param {HTMLInputElement} input\n   * @param {string} message\n   */ #showErrorMessage(input, message) {\n        input.setAttribute(\"aria-invalid\", \"true\");\n        const errorMessage = /** @type {HTMLElement} */ input.nextElementSibling;\n        errorMessage.innerText = message;\n        errorMessage.removeAttribute(\"hidden\");\n        const errorLabel = /** @type {HTMLElement} */ input.previousElementSibling;\n        errorLabel.style.color = $089c40fcbb903d20$var$lightRed;\n    }\n    /**\n   *\n   * @param {HTMLInputElement} input\n   * @param {string} message\n   */ #removeErrorMessage(input, message) {\n        input.setAttribute(\"aria-invalid\", \"false\");\n        const errorMessage = /** @type {HTMLElement} */ input.nextElementSibling;\n        errorMessage.innerText = message;\n        errorMessage.setAttribute(\"hidden\", \"hidden\");\n        const errorLabel = /** @type {HTMLElement}*/ input.previousElementSibling;\n        errorLabel.style.color = $089c40fcbb903d20$var$smokeyGrey;\n    }\n}\nnew $089c40fcbb903d20$var$AppComponent();\n\n})();\n//# sourceMappingURL=index.bd3df8db.js.map\n","// THIS SEEMS LIKE A COMPLICATED PROJECT AS THERE ARE THINGS TO ACCOUNT FOR\n\n// * The user must enter valid parameters for the date, month and the year\n\n// * For the year, I want the user to only enter a year between 1970 and the current year. Any year outside this is invalid.\n\n// * For the month, I need to ensure that the user only enters values between 1 - 12 which will mean January - December.\n\n// * For the date, this is a bit tricky because depending on which month the user enters the date for the end of the month varies. For Example:\n//    * 30 days is only available September, April, June and November\n//    * 28 days is only available to February but we will have 29 days if a leap year occurs\n//    * 31 days exist for the all the other months excluding those mentioned above.\n\n// * When the user fails any of the conditions we need to display error messages depending on the fail on submission of the form.\n\n// * When the user passes the condition then we need to calculate the users age in years, months and days based on the users inputs and the current year.\n\n// * We also need to update the UI as the user submits the form.\n\nconst lightRed = \"#FF5959\";\nconst smokeyGrey = \"#716f6f\";\n\n/** Class representing the first and last day of the month */\nclass Month {\n  startDate = 1;\n\n  /**\n   * The end day of the month\n   * @param {number} endDate\n   */\n  constructor(endDate) {\n    this.endDate = endDate;\n  }\n}\n\nconst January = new Month(31);\nconst February = new Month(28);\nconst March = new Month(31);\nconst April = new Month(30);\nconst May = new Month(31);\nconst June = new Month(30);\nconst July = new Month(31);\nconst August = new Month(31);\nconst September = new Month(30);\nconst October = new Month(31);\nconst November = new Month(30);\nconst December = new Month(31);\n\nconst monthsInAYear = [\n  January,\n  February,\n  March,\n  April,\n  May,\n  June,\n  July,\n  August,\n  September,\n  October,\n  November,\n  December,\n];\n\nclass AppComponent {\n  #dayInput = /** @type {HTMLInputElement} */ (document.getElementById(\"day\"));\n  #monthInput = /** @type {HTMLInputElement} */ (\n    document.getElementById(\"month\")\n  );\n  #yearInput = /** @type {HTMLInputElement} */ (\n    document.getElementById(\"year\")\n  );\n  #button = document.querySelector(\".btn-submit\");\n\n  constructor() {\n    this.#button?.addEventListener(\"click\", this.#submitDate.bind(this));\n  }\n\n  /**\n   * The event object will be available when the click event is fired\n   *\n   * @param {event} evtObj\n   */\n  #submitDate(evtObj) {\n    evtObj?.preventDefault();\n\n    // We want to check the validity of each of the input.\n    // The none of the inputs should be empty on form submission and if one or all are show an error to be user\n    // If one of the values is not a number then return an error if one or all are not values.\n    this.#validateInput(this.#dayInput);\n    this.#validateInput(this.#monthInput);\n    this.#validateInput(this.#yearInput);\n\n    const isInvalid =\n      this.#validateInput(this.#dayInput) ||\n      this.#validateInput(this.#monthInput) ||\n      this.#validateInput(this.#yearInput);\n\n    if (isInvalid) {\n      return;\n    }\n\n    const year = Number(this.#yearInput.value);\n    const month = Number(this.#monthInput.value);\n    const day = Number(this.#dayInput.value);\n\n    // Update the UI if the numbers are not suitable conditions.\n    const isValidDate = this.#validateDate(year, month, day);\n\n    if (!isValidDate) {\n      return;\n    }\n\n    // FireFox throw an error when you pass in the month and days as 1 instead 01 so I account for this here.\n    // The year is ok because we cannot go below 1970 and above the current year which is 2023 at this point.\n\n    const [monthFormat, dayFormat] = this.#formatMonthAndDay(month, day);\n\n    // MAKING USE OF THE DATE TIME STRING FORMAT --> YYYY-MM-DDTHH:mm:ss:sssZ\n    const birthdayDate = new Date(\n      `${year}-${monthFormat}-${dayFormat}T00:00:00Z`\n    );\n\n    const age = this.#calculateAge(birthdayDate);\n\n    // The next step is to display the result and update the UI.\n\n    this.#displayAge(age);\n  }\n\n  /**\n   * A method that returns an array of strings with the month input in the MM format and day in DD always.\n   * @param {number} month - The month input\n   * @param {number} day - The day input\n   * @returns {string[]} - An array of strings\n   */\n  #formatMonthAndDay(month, day) {\n    const months = month < 10 ? `0${month}` : `${month}`;\n    const days = day < 10 ? `0${day}` : `${day}`;\n    return [months, days];\n  }\n\n  /**\n   * This function display the age in years, months and days based on the users input.\n   * @param {object} age\n   * @param {number} age.years - number of years\n   * @param {number} age.months - number of months\n   * @param {number} age.days - number of days\n   */\n\n  #displayAge({ years, months, days }) {\n    const displayAgeComponent = /** @type {HTMLElement} */ (\n      document.querySelector(\"div[class~='display-age-component']\")\n    );\n    displayAgeComponent.classList.add(\"show\");\n    displayAgeComponent.innerHTML = `\n    <p class=\"display-age-component__year\"><span>${years} </span> years</p>\n    <p class=\"display-age-component__month\"><span>${months} </span> months</p>\n    <p class=\"display-age-component__days\"><span>${days} </span> days</p>\n    `;\n  }\n\n  /**\n   * Calculates the difference between two dates in years, months, and days.\n   * @param {Date} birthdayDate - The date of birth\n   * @returns {{years:number, months:number, days:number} } An object containing the number of years, months, and days between the two dates.\n   */\n  #calculateAge(birthdayDate) {\n    // We need to create the current date\n    const currentDate = new Date();\n    const dateOfBirth = birthdayDate;\n\n    let years = currentDate.getFullYear() - dateOfBirth.getFullYear();\n    let months = currentDate.getMonth() - dateOfBirth.getMonth();\n    let days = currentDate.getDate() - dateOfBirth.getDate();\n\n    if (months < 0 || (months === 0 && days < 0)) {\n      years--;\n      months += 12;\n    }\n\n    if (days < 0) {\n      months--;\n      const currentYear = currentDate.getFullYear();\n      const currentMonth = currentDate.getMonth();\n\n      // At this point its is possible that the current day date is less than the day for the date of birth.\n      // We need to get the last date of the previous month from the current date and to do this we need to pass in 0 as the last argument in the date constructor. This will give us what we want.\n      // Then we can obtain the last day of that month.\n      // Then we add the last day to our days to keep updating it provided it passes the if check.\n      const previousLastMonthDate = new Date(currentYear, currentMonth, 0);\n      const previousLastMonthDay = previousLastMonthDate.getDate();\n      days = days + previousLastMonthDay;\n    }\n\n    // Check if the birthday falls on February 29th\n    if (dateOfBirth.getMonth() === 1 && dateOfBirth.getDate() === 29) {\n      // We need to find the last leap year\n      let lastLeapYear = currentDate.getFullYear();\n\n      // We need check to see when the last leap year occurred it could be this year or the year or years before the current year.\n      while (\n        !(\n          (lastLeapYear % 4 === 0 && lastLeapYear % 100 !== 0) ||\n          lastLeapYear % 400 === 0\n        )\n      ) {\n        lastLeapYear--;\n      }\n\n      years = lastLeapYear - dateOfBirth.getFullYear();\n\n      if (months < 0 || (months === 0 && days < 0)) {\n        years--;\n        months += 12;\n      }\n\n      if (days < 0) {\n        months--;\n        const currentYear = currentDate.getFullYear();\n        const currentMonth = currentDate.getMonth();\n        const previousLastMonthDate = new Date(currentYear, currentMonth, 0);\n        const previousLastMonthDay = previousLastMonthDate.getDate();\n        days = days + previousLastMonthDay;\n      }\n    }\n\n    return { years, months, days };\n  }\n\n  /**\n   * This functions checks to see if the values passed in make up a valid date\n   * @param {number} year This is number of years\n   * @param {number} month This is the number of months\n   * @param {number} day This is the day of the month.\n   * @returns {boolean} This indicates if it is valid or not by returning a boolean true or false.\n   */\n\n  #validateDate(year, month, day) {\n    const currentDate = new Date();\n    const epochDate = new Date(1000);\n    const indexedMonth = month - 1;\n\n    const [monthFormat, dayFormat] = this.#formatMonthAndDay(month, day);\n\n    const dateInput = new Date(`${year}-${monthFormat}-${dayFormat}T00:00:00Z`);\n\n    const currentYear = currentDate.getFullYear();\n    const epochYear = epochDate.getFullYear();\n\n    // Check if the year pass n is a leap year\n    const isLeapYear = new Date(year, 1, 29).getDate() === 29;\n    February.endDate = isLeapYear ? 29 : 28;\n\n    const checkIndexMonth = indexedMonth < 0 || indexedMonth > 11;\n    const checkMaxYear = year > currentYear;\n    const checkMinYear = year < epochYear;\n    const checkMinDay = day < monthsInAYear[indexedMonth]?.startDate;\n    const checkMaxDay = day > monthsInAYear[indexedMonth]?.endDate;\n    const checkInputDate = dateInput > currentDate;\n\n    if (\n      checkIndexMonth ||\n      checkMaxYear ||\n      checkMinYear ||\n      checkMinDay ||\n      checkMaxDay ||\n      checkInputDate\n    ) {\n      if (checkIndexMonth) {\n        this.#showErrorMessage(this.#monthInput, \"Must be a valid month\");\n      }\n\n      if (checkMaxYear || checkInputDate) {\n        this.#showErrorMessage(this.#yearInput, \"Must be in the past\");\n      } else if (checkMinYear) {\n        this.#showErrorMessage(this.#yearInput, \"Must be more than 1970\");\n      }\n\n      if (checkMinDay || checkMaxDay) {\n        this.#showErrorMessage(this.#dayInput, \"Must be a valid date\");\n      } else if (day < 1 || day > 31) {\n        this.#showErrorMessage(this.#dayInput, \"Must be a valid day\");\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * This method validate the HTMLInputElements\n   * @param {HTMLInputElement} input\n   * @return {void | boolean} Returns nothing or a boolean with the value of true.\n   */\n  #validateInput(input) {\n    if (input?.value.trim() === \"\") {\n      this.#showErrorMessage(input, \"This field is required\");\n      return true;\n    }\n\n    if (isNaN(Number(input?.value))) {\n      this.#showErrorMessage(input, \"Must be a valid number\");\n      return true;\n    }\n\n    this.#removeErrorMessage(input, \"\");\n  }\n\n  /**\n   * This private method will show an error messages and indicators to the user.\n   * @param {HTMLInputElement} input\n   * @param {string} message\n   */\n  #showErrorMessage(input, message) {\n    input.setAttribute(\"aria-invalid\", \"true\");\n    const errorMessage = /** @type {HTMLElement} */ (input.nextElementSibling);\n    errorMessage.innerText = message;\n    errorMessage.removeAttribute(\"hidden\");\n    const errorLabel = /** @type {HTMLElement} */ (\n      input.previousElementSibling\n    );\n    errorLabel.style.color = lightRed;\n  }\n\n  /**\n   *\n   * @param {HTMLInputElement} input\n   * @param {string} message\n   */\n  #removeErrorMessage(input, message) {\n    input.setAttribute(\"aria-invalid\", \"false\");\n    const errorMessage = /** @type {HTMLElement} */ (input.nextElementSibling);\n    errorMessage.innerText = message;\n    errorMessage.setAttribute(\"hidden\", \"hidden\");\n    const errorLabel = /** @type {HTMLElement}*/ (input.previousElementSibling);\n    errorLabel.style.color = smokeyGrey;\n  }\n}\n\nnew AppComponent();\n"],"names":["$089c40fcbb903d20$var$Month","startDate","constructor","endDate","$089c40fcbb903d20$var$January","$089c40fcbb903d20$var$February","$089c40fcbb903d20$var$March","$089c40fcbb903d20$var$April","$089c40fcbb903d20$var$May","$089c40fcbb903d20$var$June","$089c40fcbb903d20$var$July","$089c40fcbb903d20$var$August","$089c40fcbb903d20$var$September","$089c40fcbb903d20$var$October","$089c40fcbb903d20$var$November","$089c40fcbb903d20$var$December","$089c40fcbb903d20$var$monthsInAYear","$089c40fcbb903d20$var$AppComponent","dayInput","document","getElementById","monthInput","yearInput","button","querySelector","addEventListener","submitDate","bind","evtObj","preventDefault","validateInput","isInvalid","year","Number","value","month","day","isValidDate","validateDate","monthFormat","dayFormat","formatMonthAndDay","birthdayDate","Date","age","calculateAge","displayAge","months","days","years","displayAgeComponent","classList","add","innerHTML","currentDate","getFullYear","dateOfBirth","getMonth","getDate","currentYear","currentMonth","previousLastMonthDate","previousLastMonthDay","lastLeapYear","epochDate","indexedMonth","dateInput","epochYear","isLeapYear","checkIndexMonth","checkMaxYear","checkMinYear","checkMinDay","checkMaxDay","checkInputDate","showErrorMessage","input","trim","isNaN","removeErrorMessage","message","setAttribute","errorMessage","nextElementSibling","innerText","removeAttribute","errorLabel","previousElementSibling","style","color"],"version":3,"file":"index.bd3df8db.js.map"}